# https://leetcode.com/problems/valid-sudoku/

# Approach:
# Create two lists, column list of sets and rows list of sets
# Check for quadrant as well (create a matrix)
# Keep filling them, if element already exists, return False
# Time O(n) | Space O(1)
def isValidSudoku(board):
    row_set = [set() for _ in range(9)]
    col_set = [set() for _ in range(9)]
    quad_set = [[set() for _ in range(3)] for _ in range(3)]
    for row in range(9):
        for col in range(9):
            val = board[row][col]
            if val == ".": continue
            if val in col_set[col] or val in row_set[row] or val in quad_set[row//3][col//3]: return False
            col_set[col].add(val)
            row_set[row].add(val)
            quad_set[row//3][col//3].add(val)
    return True


# board = [
#     [".",".",".",".","5",".",".","1","."],
#     [".","4",".","3",".",".",".",".","."],
#     [".",".",".",".",".","3",".",".","1"],
#     ["8",".",".",".",".",".",".","2","."],
#     [".",".","2",".","7",".",".",".","."],
#     [".","1","5",".",".",".",".",".","."],
#     [".",".",".",".",".","2",".",".","."],
#     [".","2",".","9",".",".",".",".","."],
#     [".",".","4",".",".",".",".",".","."]]
# board = [["5","3",".",".","7",".",".",".","."]
# ,["6",".",".","1","9","5",".",".","."]
# ,[".","9","8",".",".",".",".","6","."]
# ,["8",".",".",".","6",".",".",".","3"]
# ,["4",".",".","8",".","3",".",".","1"]
# ,["7",".",".",".","2",".",".",".","6"]
# ,[".","6",".",".",".",".","2","8","."]
# ,[".",".",".","4","1","9",".",".","5"]
# ,[".",".",".",".","8",".",".","7","9"]]
board = [["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
print(isValidSudoku(board))